generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
  activeCustomer
}

enum GoalType {
  gain
  lose
  maintain
}

enum ExperienceLevel {
  beginner
  intermediate
  advanced
}

enum TrainingMethod {
  low
  high
}

enum Field {
  sex
  height
  weight
  biotype
  deficiencyOrLimitation
  objective
  timeExpectedForResult
  muscleFocus
  alreadyTrained
  experienceLevel
  daysPerWeek
  avaliableTimePerWorkout
  trainingSchedule
}

model User {
  id         String          @id @default(uuid())
  email      String          @unique
  role       Role            @default(customer)
  password   String
  name       String
  goal       GoalType        @default(gain)
  experience ExperienceLevel @default(beginner)

  trainings       Training[]
  progress        HistoryProgress[]
  quizResponses   QuizResponse[]
  exercises       Exercise[]
  trainingHistory TrainingHistory[]
  userActivities  UserActivities[]

  streakCount      Int       @default(0) @map("streak_count")
  maxStreak        Int       @default(0) @map("max_streak")
  lastActivityDate DateTime? @map("last_activity_date")

  createdAt DateTime @default(now())

  @@map("user")
}

model UserActivities {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  activityDate DateTime @default(now()) @map("activity_date")

  user User @relation(fields: [userId], references: [id])
}

model Training {
  id          String         @id @default(uuid())
  userId      String         @map("user_id")
  type        TrainingMethod
  title       String
  description String
  routine     Json
  createdAt   DateTime       @default(now()) @map("created_at")

  user            User              @relation(fields: [userId], references: [id])
  exercises       Exercise[]
  trainingHistory TrainingHistory[]

  @@map("training")
}

model TrainingHistory {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  trainingId  String   @map("training_id")
  performadAt DateTime @default(now()) @map("performad_at")

  user     User     @relation(fields: [userId], references: [id])
  training Training @relation(fields: [trainingId], references: [id])
}

model Exercise {
  id            String   @id @default(uuid())
  name          String
  category      String
  mainMuscle    String
  difficulty    String
  equipment     String?
  description   String?
  executionTips String?
  createdAt     DateTime @default(now())

  createdById String? @map("created_by_id")
  createdBy   User?   @relation(fields: [createdById], references: [id])

  trainings Training[]

  @@map("exercise")
}

model HistoryProgress {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  weight    Float
  note      String?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("history_progress")
}

model Quiz {
  id            String         @id @default(uuid())
  title         String
  questions     QuizQuestion[]
  quizResponses QuizResponse[]

  @@map("quiz")
}

model QuizQuestion {
  id      String @id @default(uuid())
  quizId  String @map("quiz_id")
  text    String
  options Json?
  field   Field

  quiz        Quiz         @relation(fields: [quizId], references: [id])
  quizAnswers QuizAnswer[]

  @@map("quiz_question")
}

model QuizResponse {
  id        String   @id @default(uuid())
  quizId    String   @map("quiz_id")
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  quiz    Quiz         @relation(fields: [quizId], references: [id])
  user    User?        @relation(fields: [userId], references: [id])
  answers QuizAnswer[]

  @@map("quiz_response")
}

model QuizAnswer {
  id             String @id @default(uuid())
  quizResponseId String @map("quiz_response_id")
  questionId     String @map("question_id")
  answer         String

  quizResponse QuizResponse @relation(fields: [quizResponseId], references: [id])
  question     QuizQuestion @relation(fields: [questionId], references: [id])

  @@map("quiz_answer")
}
